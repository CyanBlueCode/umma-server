#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('umma-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3100');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//──── GOOGLE SPREADSHEETS API ───────────────────────────────────────────────────────────

const { google } = require('googleapis');
const keys = require('../gkeys.json');

const client = new google.auth.JWT(keys.client_email, null, keys.private_key, [
  'https://www.googleapis.com/auth/spreadsheets.readonly'
]);

client.authorize((err, tokens) => {
  if (err) {
    console.error(err);
    throw err;
  } else {
    console.log('Google Sheets API client connected!');
    gsGet(client);
  }
});

async function gsGet(client) {
  const gsApi = google.sheets({
    version: 'v4',
    auth: client
  });

  // TODO: update ranges after finalizing Sheets setup
  const options = {
    spreadsheetId: '1JWYHiOightRfEg3qFrDniItyYII5fgXdi99m11mgSH0',
    ranges: ['Projects!A3:B', 'Events!A3:B']
  };

  const data = await gsApi.spreadsheets.values.batchGet(options);

  const projects = data.data.valueRanges[0].values;
  const events = data.data.valueRanges[1].values;

  const sheetsData = {
    projects,
    events
  };

  return sheetsData;
}
